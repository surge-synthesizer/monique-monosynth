# Hacky secret project 3

trigger:
- main

pr:
- main

variables:
  - group: mac-signing

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-12'
        releaseAsset: True
        isMac: True
        cmakeRelArgs: -D"CMAKE_OSX_ARCHITECTURES=arm64;x86_64"
        cmakeDebArgs: -D"CMAKE_OSX_ARCHITECTURES=arm64;x86_64"
        cmakePRTarget: monique-staged
      win:
        imageName: 'windows-2019'
        isWindows: True
        releaseAsset: True
        cmakeRelArgs: -A x64
        cmakeDebArgs: -A x64
        cmakePRTarget: monique-staged
      lin:
        imageName: 'ubuntu-20.04'
        isLinux: True
        releaseAsset: True
        cmakeRelArgs:
        cmakeDebArgs:
        cmakePRTarget: monique-staged
      linux-codequality:
        imageName: 'ubuntu-20.04'
        isLinux: True
        cmakePRTarget: "code-quality-pipeline-checks"
  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 5
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      set -e

      sudo apt-get update

      sudo apt-get install -y \
          devscripts \
          libxcb-cursor-dev \
          libxcb-keysyms1-dev \
          libxcb-util-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          ninja-build \
          xcb \
          libgtk-3-dev \
          libwebkit2gtk-4.0 \
          libwebkit2gtk-4.0-dev \
          libcurl4-openssl-dev \
          alsa \
          alsa-tools \
          libasound2-dev \
          libjack-dev \
          libfreetype6-dev \
          libxinerama-dev \
          libxcb-xinerama0 \
          libxinerama1 \
          x11proto-xinerama-dev \
          libxrandr-dev \
          libgl1-mesa-dev \
          libxcursor-dev \
          libxcursor1 \
          libxcb-cursor-dev \
          libxcb-cursor0

    condition: variables.isLinux
    displayName: linux - run apt-get



  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'dev_id.p12'
      certPwd: '$(MAC_EXPORTED_CERT_PW)'
    condition: variables.isMac

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'inst_id.p12'
      certPwd: '$(MAC_EXPORTED_CERT_PW)'
    condition: variables.isMac

  - bash: |
      git submodule update --depth 1 --init --recursive
    displayName: Get SubModules

  - bash: |
      echo cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug $(cmakeDebArgs)
      cmake -Bbuild -DAZURE_PIPELINE=1 -DCMAKE_BUILD_TYPE=Debug $(cmakeDebArgs)
    displayName: Run CMake (Debug)
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - bash: |
      echo cmake --build build --config Debug --target $(cmakePRTarget) --parallel 4
      cmake --build build --config Debug --target $(cmakePRTarget) --parallel 4
    displayName: Build Monique for a Pull Request
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - bash: |
      echo cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug $(cmakeRelArgs)
      cmake -Bbuild -DAZURE_PIPELINE=1 -DCMAKE_BUILD_TYPE=Release $(cmakeRelArgs)
    displayName: Run CMake (Release)
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))

  - bash: |
      cmake --build build --config Release --target monique-installer --parallel 4
    displayName: Build Monique Installer for Main
    condition: and(not(eq(variables['Build.Reason'], 'PullRequest')),variables.releaseAsset)
    env:
      MAC_INSTALLING_CERT: $(MAC_INSTALLING_CERT)
      MAC_SIGNING_1UPW: $(MAC_SIGNING_1UPW)
      MAC_SIGNING_CERT: $(MAC_SIGNING_CERT)
      MAC_SIGNING_ID: $(MAC_SIGNING_ID)
      MAC_SIGNING_TEAM: $(MAC_SIGNING_TEAM)

  - bash: |
      mkdir -p build/stage_git/git_info
      git log -1 --pretty=format:'%h : %s - %an' > build/stage_git/git_info/git_nightly_monique_log_display
      git log -1 --pretty=format:'%h : %s%n%aD%n%an%n%n%B' > build/stage_git/git_info/git_nightly_monique_log_long_display
      git log -5 --pretty=format:'%h : %s - %an' > build/stage_git/git_info/git_nightly_monique_recent_five
      git log -1 --pretty=format:'%h' > build/stage_git/git_info/git_nightly_monique_log_hash

      cat build/stage_git/git_info/*

    condition: and(variables.isLinux, not(eq(variables['Build.Reason'], 'PullRequest')), variables.releaseAsset)
    displayName: Use the linux build to make git log info

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_MAC_DIST'
      targetPath: 'build/installer'
    condition: and(variables.isMac,not(eq(variables['Build.Reason'], 'PullRequest')),variables.releaseAsset)
    displayName: mac - publish mac dmg

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_WIN_DIST'
      targetPath: 'build/installer'
    condition: and(variables.isWindows,not(eq(variables['Build.Reason'], 'PullRequest')),variables.releaseAsset)
    displayName: win - publish win zip

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'INSTALLER_LIN_DIST'
      targetPath: 'build/installer'
    condition: and(variables.isLinux,not(eq(variables['Build.Reason'], 'PullRequest')), variables.releaseAsset)
    displayName: lin - publish lin zip


  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'GIT_INFO'
      targetPath: 'build/stage_git/'
    condition: and(variables.isLinux,not(eq(variables['Build.Reason'], 'PullRequest')),variables.releaseAsset)
    displayName: lin - publish git info


  # Release Stage
- job: Release
  dependsOn: Build
  condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
  strategy:
    matrix:
      release-on-mac:
        imageName: 'macos-10.15'

  steps:
    - checkout: self
      persistCredentials: true

    - task: DownloadSecureFile@1
      inputs:
        secureFile: discord-nightly-monique.webhook

    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'INSTALLER_MAC_DIST'
        targetPath: $(System.DefaultWorkingDirectory)

    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'INSTALLER_WIN_DIST'
        targetPath: $(System.DefaultWorkingDirectory)

    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'INSTALLER_LIN_DIST'
        targetPath: $(System.DefaultWorkingDirectory)


    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'GIT_INFO'
        targetPath: $(System.DefaultWorkingDirectory)

    - bash: |
        set -e
        set -x
  
        mkdir -p releases
        
        mv *.zip *.dmg *.exe releases
        
        ls -l $(System.DefaultWorkingDirectory)/git_info/
        echo "## Monique Nightly Build" > releases/ReleaseNotes.md
        echo " " >> releases/ReleaseNotes.md
        date +"**Last Updated On: %Y-%m-%d %H:%M:%S %Z**" >> releases/ReleaseNotes.md
        echo " " >> releases/ReleaseNotes.md
        echo "5 most recent commits in this install:" >> releases/ReleaseNotes.md
        echo "<pre>" >> releases/ReleaseNotes.md
        cat $(System.DefaultWorkingDirectory)/git_info/git_nightly_monique_recent_five >> releases/ReleaseNotes.md
        echo " " >> releases/ReleaseNotes.md
        echo "</pre>" >> releases/ReleaseNotes.md
        
        echo "---------------"
        cat releases/ReleaseNotes.md
        echo "---------------"
        
        ls -alFh releases
      displayName: Prepare Release

    - task: GitHubRelease@0
      displayName: "Create Github Nightly Release"
      # condition: eq(variables.SURGE_IS_MAIN, 'true')
      inputs:
        gitHubConnection: surge-rackupdater
        repositoryName: surge-synthesizer/monique-monosynth
        action: 'edit'
        tag: Nightly
        target: '$(Build.SourceVersion)'
        addChangeLog: false
        assetUploadMode: 'delete'
        releaseNotesFile: $(System.DefaultWorkingDirectory)/releases/ReleaseNotes.md
        assets: $(System.DefaultWorkingDirectory)/releases/*.*

# ToDo: Non-nightly release
#    - bash: |
#        git tag $(SURGE_VERSION)
#        git push origin $(SURGE_VERSION)
#      displayName: "Create Github Tag for Stable"
#      condition: eq(variables.SURGE_IS_MAIN, 'false')

#    - task: GitHubRelease@0
#      displayName: "Create Github Stable Release"
#      condition: eq(variables.SURGE_IS_MAIN, 'false')
#      inputs:
#        gitHubConnection: surge-rackupdater
#        repositoryName: surge-synthesizer/releases-xt
#        action: 'create'
#        tag: $(SURGE_VERSION)
#        tagSource: 'auto'
#        target: '$(Build.SourceVersion)'
#        addChangeLog: false
#        assetUploadMode: 'delete'
#        releaseNotesFile: $(System.DefaultWorkingDirectory)/releases/ReleaseNotes.md
#        assets: $(System.DefaultWorkingDirectory)/releases/*.*


    - bash: |
        # Finally tell discord
        export GIT_LOG_DISP=`cat git_info/git_nightly_monique_log_display  | sed -e s/\"//g`
        
        curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"A Monique Nightly is available. Get it here:\n${GIT_LOG_DISP}\nhttps://github.com/surge-synthesizer/monique-monosynth/releases/tag/Nightly\"}" `cat $AGENT_TEMPDIRECTORY/discord-nightly-monique.webhook`
      displayName: Tell Discord
